// üêº
import Validation from './Validation';
import Formdata from './Formdata';

class Submit {
  static isValid(inputs = []) {
    // –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ data-required
    const requiredElms = inputs.filter((input) => input.dataset.required === 'true');
    // –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ data-name
    const isInvalid = !!requiredElms.filter((elm) => Validation.check(elm.dataset.name, elm) === false).length;
    return !isInvalid;
  }

  static fetch(url, formData) {
    const params = {
      method: 'POST',
      mode: 'no-cors', // TODO: —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –Ω–∞—Ç—è–≥–∏–≤–∞–Ω–∏–∏
      body: formData,
    };

    // TODO: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞—Ç—è–≥–∏–≤–∞–Ω–∏–∏
    // const handleErrors = (response) => {
    //   if (!response.ok) {
    //     throw Error(response.statusText);
    //   }
    //   return response;
    // };
    // TODO: –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –õ–∏–±–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    // const handleSuccess = (response) => {
    //   console.log('—Ñ–æ—Ä–º–∞ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å');
    //   console.log(response.json());
    //   // console.log(response.json().status);
    // };

    fetch(url, params)
      // TODO: —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞—Ç—è–≥–∏–≤–∞–Ω–∏–∏
      // .then(handleErrors)
      // .then(handleSuccess)
      .catch((error) => console.error('–§–æ—Ä–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å', error));
  }

  // –Ω–µ–≤–∏–¥–∏–º–∞—è –≥—É–≥–ª-–∫–∞–ø—Ç—á–∞
  static recaptcha(key, formData, fetch) {
    try {
      // –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ <script>
      window.grecaptcha.ready(() => {
        window.grecaptcha.execute(key, { action: 'form' })
          .then((token) => {
            // –¥–æ–±–∞–≤–ª—è–µ–º –≤ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω —Ä–µ–∫–∞–ø—Ç—á–∏
            formData.append('recaptcha_response', token);
            fetch(formData);
          })
          .then((res) => res);
      });
    } catch (e) {
      console.error('–ß—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫ —Å —Ä–µ–∫–∞–ø—Ç—á–µ–π -> Submit.recaptcha', e);
    }
  }

  // static handleSuccess(formElm, msgElm) {
  //   console.warn('HANDLE_SUCCESS');
  //   Success.toggleMessage(true, formElm, msgElm);
  //   Success.clearForm();
  // }

  // eslint-disable-next-line consistent-return
  static send(inputs = [], url, captchaKey) {
    if (this.isValid(inputs)) {
      const formData = Formdata.create(inputs);

      // –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π formData
      // for (const pair of formData.entries()) {
      //   console.log(`${pair[0]}, ${pair[1]}`);
      // }

      this.recaptcha(captchaKey, formData, (data) => this.fetch(url, data));
    } else {
      console.warn('%c –ü–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏', 'color: #212121; font-weight: bold; padding: 1em; background: #fa9f0c');
      return Promise.reject(new Error('–§–æ—Ä–º–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞—Å—å. –ü–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã —Å –æ—à–∏–±–∫–∞–º–∏'))
        .catch((error) => {
          // console.log(error); // –ø–µ—á–∞—Ç–∞–µ—Ç "–ø—Ä–æ–≤–∞–ª" + Stacktrace
          throw error; // –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, –≤—ã–∑—ã–≤–∞—è –Ω–æ–≤—ã–π reject
        });
    }
  }
}

export default Submit;
