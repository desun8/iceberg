// üêº
// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–ø—É—Ç-–º–∞—Å–∫–∏
import Inputmask from "inputmask";
import Validation from "./Validation";
import { FormElm } from "./types";

class Mask {
  static get InputMask() {
    // –°—Ç—Ä–∞–Ω–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç—Å—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ —ç—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å–±–æ—Ä—â–∏–∫–∞.
    // –ß—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞–ª–æ, –Ω—É–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å "Inputmask.default"
    // @ts-ignore
    return Inputmask.default;
  }

  // —É–±–∏—Ä–∞–µ–º css –∫–ª–∞—Å—Å –æ—à–∏–±–∫–∏
  static onKeyDown(event: Event) {
    Validation.setClass(event.target as FormElm, false);
  }

  static names(input: HTMLInputElement) {
    const {
      onKeyDown,
    } = this;

    input.addEventListener("keypress", (event) => {
      const isForbiddenKey = !/[–∞-—è-]/i.test(event.key)

      if (isForbiddenKey) {
        event.preventDefault();
      } else {
        onKeyDown(event);
      }
    });
  }

  static cyrillic(input: HTMLInputElement) {
    const {
      onKeyDown,
    } = this;

    input.addEventListener("keypress", (event) => {
      const isForbiddenKey = !/[–∞-—è\s\d.,-/\\]/i.test(event.key)

      if (isForbiddenKey) {
        event.preventDefault();
      } else {
        onKeyDown(event);
      }
    });
  }

  // –ú–æ–∂–Ω–æ —Ç—É—Ç –∂–µ –¥–ª—è –∏–Ω–ø—É—Ç–∞ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å inputmode="tel"
  // –ß—Ç–æ–±—ã –Ω–∞ —Ç–∞—á–∞—Ö –ø–æ—è–≤–ª—è–ª–∞—Å—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –Ω–∞–±–æ—Ä–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
  // –ò–ª–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ —Ä–∞–∑–º–µ—Ç–∫–µ —ç—Ç–æ –¥–µ–ª–∞—Ç—å
  static tel(input: HTMLInputElement) {
    const {
      InputMask,
      onKeyDown,
    } = this;
    new InputMask(
      "+7 (999) 999-99-99", {
        placeholder: "x",
        onKeyDown,
      },
    ).mask(input);
  }

  static date(input: HTMLInputElement) {
    const {
      InputMask,
      onKeyDown,
    } = this;
    new InputMask(
      "99.99.9999", {
        placeholder: "–¥–¥.–º–º.–≥–≥–≥–≥",
        onKeyDown,
      },
    ).mask(input);
  }

  static documentSeries(input: HTMLInputElement, type?: string) {
    const {
      InputMask,
      onKeyDown,
    } = this;

    const mask = type === "document-birth" ? "**|-*|-*[*]" : "9999";

    if (input.inputmask) {
      input.inputmask.remove();
    }

    new InputMask(
      mask, {
        placeholder: "x",
        greedy: false,
        onKeyDown,
      },
    ).mask(input);
  }

  static documentNumber(input: HTMLInputElement) {
    const {
      InputMask,
      onKeyDown,
    } = this;
    new InputMask(
      "999999", {
        placeholder: "x",
        onKeyDown,
      },
    ).mask(input);
  }
}

export default Mask;
